{"version":3,"sources":["redux/store.js","redux/modules/posts/reducers/index.js","redux/modules/posts/constants.js","serviceWorker.js","redux/modules/posts/actions.js","App.jsx","index.js"],"names":["combineReducers","posts","state","action","type","Boolean","window","location","hostname","match","connect","dispatch","onGetPosts","fetch","then","response","json","catch","console","error","onSetPosts","setPosts","props","className","map","post","key","userId","id","title","onClick","store","createStore","rootReducer","compose","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sOAIeA,cAAgB,CAC3BC,MCDW,WAA+B,IAArBC,EAAoB,uDAAZ,GAAIC,EAAQ,uCACzC,OAAQA,EAAOC,MACX,ICNiB,YDOb,OAAOD,EAAOF,MAClB,QACI,OAAOC,MEGCG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCdC,ICqCQC,eAbS,SAACR,GACrB,MAAO,CACHD,MAAOC,EAAMD,UAIM,SAACU,GACxB,MAAO,CACHC,WAAY,kBAAMD,GD9BI,SAAAA,GAC1BE,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACFJ,EAAS,CAAEP,KFVE,YEUeH,MAAOc,OAEtCE,OAAM,kBAAMC,QAAQC,MAAM,sCCyB3BC,WAAY,SAACnB,GAAD,OAAWU,EDjCP,SAACV,GAAY,MAAO,CAAEG,KFJrB,YEIsCH,SCiCvBoB,CAASpB,QAIlCS,EArCH,SAACY,GAKT,OACI,yBAAKC,UAAU,QACVD,EAAMrB,OACH,wBAAIsB,UAAU,eACTD,EAAMrB,MAAMuB,KAAI,SAAAC,GACb,OACI,wBAAIF,UAAU,aAAaG,IAAG,UAAKD,EAAKE,OAAV,YAAoBF,EAAKG,KAAOH,EAAKI,WAKnF,yBAAKN,UAAU,kBACX,4BAAQA,UAAU,gBAAgBO,QAASR,EAAMV,YAAjD,aACA,4BAAQW,UAAU,gBAAgBO,QAjB3B,WACfR,EAAMF,WAAW,MAgBT,cCXVW,G,MAAQC,YACZC,EACAC,YACEC,YAAgBC,KAChB9B,OAAO+B,8BAAgC/B,OAAO+B,kCAIlDC,IAASC,OACP,kBAAC,IAAD,CAAUR,MAAOA,GACf,kBAAC,EAAD,OAEFS,SAASC,eAAe,SH4GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,MAAK,SAAA+B,GACjCA,EAAaC,kB","file":"static/js/main.0b9a49c8.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\n\nimport postsReducers from './modules/posts/reducers';\n\nexport default combineReducers({\n    posts: postsReducers\n});","import {\n    SET_POSTS\n} from '../constants';\n\nexport default function (state = [], action) {\n    switch (action.type) {\n        case SET_POSTS:\n            return action.posts;\n        default:\n            return state;\n    }\n}","export const SET_POSTS = 'SET_POSTS';","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {\n    SET_POSTS\n} from './constants'\n\nexport const setPosts = (posts) => { return { type: SET_POSTS, posts } }\n\nexport const getPosts = () => dispatch => {\n    fetch('https://jsonplaceholder.typicode.com/todos')\n        .then(response => response.json())\n        .then(response => {\n            dispatch({ type: SET_POSTS, posts: response })\n        })\n        .catch(() => console.error('Error while fetching posts.'))\n}","import React from 'react';\nimport { connect } from 'react-redux';\nimport { getPosts, setPosts } from './redux/modules/posts/actions';\n\nconst App = (props) => {\n    const cleanPosts = () => {\n        props.onSetPosts([])\n    }\n\n    return (\n        <div className=\"list\">\n            {props.posts &&\n                <ul className=\"list__items\">\n                    {props.posts.map(post => {\n                        return (\n                            <li className=\"list__item\" key={`${post.userId}-${post.id}`}>{post.title}</li>\n                        )\n                    })}\n                </ul>\n            }\n            <div className=\"list__controls\">\n                <button className=\"common-button\" onClick={props.onGetPosts}>get posts</button>\n                <button className=\"common-button\" onClick={cleanPosts}>clean</button>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        posts: state.posts\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onGetPosts: () => dispatch(getPosts()),\n        onSetPosts: (posts) => dispatch(setPosts(posts))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { Provider } from 'react-redux';\r\nimport rootReducer from './redux/store';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport App from './App'\r\nimport './style.sass'\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  compose(\r\n    applyMiddleware(thunk),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n  )\r\n)\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}